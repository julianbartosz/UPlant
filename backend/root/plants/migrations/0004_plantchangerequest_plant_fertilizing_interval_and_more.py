# Generated by Django 5.0.4 on 2025-04-18 00:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('plants', '0003_remove_plant_watering_interval_plant_water_interval'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PlantChangeRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=100)),
                ('old_value', models.TextField(blank=True, null=True)),
                ('new_value', models.TextField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=10)),
                ('reason', models.TextField(blank=True, help_text="User's reason for the change", null=True)),
                ('review_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='plant',
            name='fertilizing_interval',
            field=models.PositiveIntegerField(blank=True, help_text='Recommended days between fertilizing', null=True),
        ),
        migrations.AddField(
            model_name='plant',
            name='pruning_interval',
            field=models.PositiveIntegerField(blank=True, help_text='Recommended days between pruning', null=True),
        ),
        migrations.AddConstraint(
            model_name='plant',
            constraint=models.CheckConstraint(check=models.Q(('water_interval__gt', 0)), name='check_water_interval_positive'),
        ),
        migrations.AddConstraint(
            model_name='plant',
            constraint=models.CheckConstraint(check=models.Q(('days_to_harvest__gte', 0), ('days_to_harvest__isnull', True), _connector='OR'), name='check_days_pos'),
        ),
        migrations.AddConstraint(
            model_name='plant',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('ph_maximum__gte', 0), ('ph_maximum__lte', 14)), ('ph_maximum__isnull', True), _connector='OR'), name='check_ph_max'),
        ),
        migrations.AddConstraint(
            model_name='plant',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('ph_maximum__isnull', False), ('ph_minimum__gte', 0), ('ph_minimum__lte', 14), ('ph_minimum__lte', models.F('ph_maximum'))), models.Q(('ph_maximum__isnull', True), ('ph_minimum__gte', 0), ('ph_minimum__lte', 14)), ('ph_minimum__isnull', True), _connector='OR'), name='check_ph_min'),
        ),
        migrations.AddConstraint(
            model_name='plant',
            constraint=models.CheckConstraint(check=models.Q(('row_spacing_cm__gte', 0), ('row_spacing_cm__isnull', True), _connector='OR'), name='check_row_pos'),
        ),
        migrations.AddConstraint(
            model_name='plant',
            constraint=models.CheckConstraint(check=models.Q(('spread_cm__gte', 0), ('spread_cm__isnull', True), _connector='OR'), name='check_spread_pos'),
        ),
        migrations.AddConstraint(
            model_name='plant',
            constraint=models.CheckConstraint(check=models.Q(('minimum_precipitation__gte', 0), ('minimum_precipitation__isnull', True), _connector='OR'), name='check_min_precip_pos'),
        ),
        migrations.AddConstraint(
            model_name='plant',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('minimum_precipitation__isnull', False), ('maximum_precipitation__gte', 0), ('maximum_precipitation__gte', models.F('minimum_precipitation'))), models.Q(('minimum_precipitation__isnull', True), ('maximum_precipitation__gte', 0)), ('maximum_precipitation__isnull', True), _connector='OR'), name='check_max_precip_pos'),
        ),
        migrations.AddConstraint(
            model_name='plant',
            constraint=models.CheckConstraint(check=models.Q(('minimum_root_depth__gte', 0), ('minimum_root_depth__isnull', True), _connector='OR'), name='check_root_depth_pos'),
        ),
        migrations.AddConstraint(
            model_name='plant',
            constraint=models.CheckConstraint(check=models.Q(('min_temperature__isnull', True), ('max_temperature__isnull', True), ('min_temperature__lte', models.F('max_temperature')), _connector='OR'), name='check_temperature_range'),
        ),
        migrations.AddField(
            model_name='plantchangerequest',
            name='plant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='change_requests', to='plants.plant'),
        ),
        migrations.AddField(
            model_name='plantchangerequest',
            name='reviewer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_changes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='plantchangerequest',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
